cmake_minimum_required(VERSION 2.4 FATAL_ERROR)
project(LibBase)

option(BUILD_WITH_FSANITIZE "Build with Sanitizing mode" "Memory")
option(BUILD_STATIC_EXEC "Build the execution" OFF)
option(BUILD_TESTS "Build the test suite" ON)

# @NOTE: add our custom module
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if (BUILD_STATIC_EXEC)
	set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
	set(BUILD_SHARED_LIBS OFF)
	set(CMAKE_EXE_LINKER_FLAGS "-static")
endif()
find_package(GTest)

# @NOTE: many CI services still support c++ 11 and some Linux distribute still only
# use C++11 on its main stream so we must consider using it while waiting our repo
# will be developed
include(AddCXXCompilerFlag)
include(AddCCompilerFlag)

add_cxx_compiler_flag(-std=c++11)
add_c_compiler_flag(-std=c11)

if (NOT HAVE_CXX_FLAG_STD_CXX11)
	add_cxx_compiler_flag(-std=c++0x)
endif()

# @NOTE: these common flags will be used globally around my repos
add_cxx_compiler_flag(-fPIC)
add_cxx_compiler_flag(-Wall)
add_cxx_compiler_flag(-Wextra)
add_cxx_compiler_flag(-Wformat=2)
add_cxx_compiler_flag(-fno-strict-aliasing)
add_cxx_compiler_flag(-Wno-deprecated-register)
add_cxx_compiler_flag(-fno-omit-frame-pointer)

# @NOTE: maybe there was a bug inside gcc's stack protector that cause hanging
#  issue on Release mode
if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
	add_cxx_compiler_flag(-fno-stack-protector)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Coverage")
	include(CodeCoverage)

	add_definitions(-DCOVERAGE=1)

	add_cxx_compiler_flag(-Werror)
	add_cxx_compiler_flag(-O3)
	add_c_compiler_flag(-O3)
	add_cxx_compiler_flag(-g3)
	add_c_compiler_flag(-g3)
	add_cxx_compiler_flag(-Wfatal-errors)
	add_cxx_compiler_flag(-fprofile-arcs)
	add_cxx_compiler_flag(-ftest-coverage)

	add_c_compiler_flag(-fprofile-arcs)
	add_c_compiler_flag(-ftest-coverage)

	setup_target_for_coverage(NAME ${PROJECT_NAME}_coverage EXECUTABLE tests/alltests)
elseif(CMAKE_BUILD_TYPE STREQUAL "Profiling")
	add_cxx_compiler_flag(-fprofile-generate)
	add_c_compiler_flag(-fprofile-generate)
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
	set(CMAKE_CXX_FLAGS_RELEASE "")

	add_cxx_compiler_flag(-O3)
	add_c_compiler_flag(-O3)
	add_cxx_compiler_flag(-g3)
	add_c_compiler_flag(-g3)
	add_cxx_compiler_flag(-fno-unwind-tables)
elseif(CMAKE_BUILD_TYPE STREQUAL "Sanitize")
	add_cxx_compiler_flag(-fno-omit-frame-pointer)
	add_c_compiler_flag(-fno-omit-frame-pointer)
	add_cxx_compiler_flag(-fno-unwind-tables)
	add_cxx_compiler_flag(-O1)
	add_c_compiler_flag(-O1)
	add_cxx_compiler_flag(-g3)
	add_c_compiler_flag(-g3)

	if(BUILD_WITH_FSANITIZE STREQUAL "Memory")
		add_cxx_compiler_flag(-fsanitize=memory)
		add_cxx_compiler_flag(-fsanitize-memory-track-origins=2)
		add_c_compiler_flag(-fsanitize=memory)
		add_c_compiler_flag(-fsanitize-memory-track-origins=2)
	elseif(BUILD_WITH_FSANITIZE STREQUAL "Address")
		add_cxx_compiler_flag(-fsanitize=address)
		add_c_compiler_flag(-fsanitize=address)
	elseif(BUILD_WITH_FSANITIZE STREQUAL "Thread")
		add_cxx_compiler_flag(-fsanitize=thread)
		add_c_compiler_flag(-fsanitize=thread)
	endif()
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
	#add_cxx_compiler_flag(-Werror)
	add_cxx_compiler_flag(-Wfatal-errors)
	add_cxx_compiler_flag(-fno-stack-protector)
endif()

# @NOTE: suppress some feature according to the compilers
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 3.2)
		add_cxx_compiler_flag(-Wno-format-nonliteral)
	endif()
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
	add_cxx_compiler_flag(-Wno-unused-but-set-variable)
	add_cxx_compiler_flag(-Wno-unused-variable)
	add_cxx_compiler_flag(-Wno-unused-parameter)
	add_cxx_compiler_flag(-Wno-unused-function)
	add_cxx_compiler_flag(-fno-asynchronous-unwind-tables)

	if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.0)
		add_cxx_compiler_flag(-Wno-implicit-fallthrough)
	endif()
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
	# using Intel C++
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
	# using Visual Studio C++
endif()

add_definitions(-DUSE_STD_STRING=0)

add_subdirectory(Libraries/Base)
add_subdirectory(Libraries/Data)
add_subdirectory(Libraries/Unittest)

if (NOT BUILD_STATIC_EXEC)
	add_subdirectory(Libraries/Wrapping)
endif()

if (BUILD_TESTS)
	add_subdirectory(Tests)
	enable_testing()
	add_test(NAME auto COMMAND Tests/auto)
	add_test(NAME argparse COMMAND Tests/argparse)
	add_test(NAME deadlock COMMAND Tests/deadlock)
	add_test(NAME exception COMMAND Tests/exception)
	add_test(NAME hashtable COMMAND Tests/hashtable)
	add_test(NAME glob COMMAND Tests/glob)
	add_test(NAME logcat COMMAND Tests/logcat)
	add_test(NAME protect COMMAND Tests/protect)
	add_test(NAME property COMMAND Tests/property)
	add_test(NAME popen COMMAND Tests/popen)
	add_test(NAME refcount COMMAND Tests/refcount)
	add_test(NAME stream COMMAND Tests/stream)
	add_test(NAME string COMMAND Tests/string)
	add_test(NAME thread COMMAND Tests/thread)
	add_test(NAME vertex COMMAND Tests/vertex)
	add_test(NAME memmap COMMAND Tests/memmap)
	add_test(NAME json COMMAND Tests/json)
	add_test(NAME passed COMMAND Tests/passed)
	add_test(NAME hello COMMAND bash -c "cd Tests && /usr/bin/python3 ./Hello.py")
	if (NOT BUILD_STATIC_EXEC AND NOT CMAKE_BUILD_TYPE STREQUAL "Coverage" AND NOT CMAKE_BUILD_TYPE STREQUAL "Profiling")
		add_test(NAME function COMMAND Tests/function)
	endif()

	add_test(NAME auto_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/auto)
	add_test(NAME argparse_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/argparse)
	add_test(NAME exception_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/exception)
	add_test(NAME glob_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/glob)
	add_test(NAME logcat_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/logcat)
	add_test(NAME protect_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/protect)
	add_test(NAME property_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/property)
	add_test(NAME popen_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/popen)
	add_test(NAME refcount_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/refcount)
	add_test(NAME stream_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/stream)
	add_test(NAME string_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/string)
	add_test(NAME vertex_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/vertex)
	add_test(NAME json_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/json)
	add_test(NAME passed_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/passed)
	#add_test(NAME hashtable_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/valgrind.sh Tests/hashtable)
	#add_test(NAME deadlock_dbg COMMAND ${CMAKE_SOURCE_DIR}/Tools/Utilities/helgrind.sh Tests/deadlock)

	set_tests_properties(auto_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(argparse_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(exception_dbg PROPERTIES TIMEOUT 1200)
	set_tests_properties(glob_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(logcat_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(protect_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(property_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(popen_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(refcount_dbg PROPERTIES TIMEOUT 1200)
	set_tests_properties(stream_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(string_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(vertex_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(json_dbg PROPERTIES TIMEOUT 30)
	set_tests_properties(passed_dbg PROPERTIES TIMEOUT 30)
	#set_tests_properties(hashtable_dbg PROPERTIES TIMEOUT 1200)
	#set_tests_properties(deadlock_dbg PROPERTIES TIMEOUT 1200)

	set_tests_properties(hashtable PROPERTIES TIMEOUT 30)
	set_tests_properties(deadlock PROPERTIES TIMEOUT 100)
	set_tests_properties(exception PROPERTIES TIMEOUT 20)
	set_tests_properties(property PROPERTIES TIMEOUT 10)
	set_tests_properties(vertex PROPERTIES TIMEOUT 10)
	set_tests_properties(logcat PROPERTIES TIMEOUT 20)
	set_tests_properties(popen PROPERTIES TIMEOUT 20)
	set_tests_properties(thread PROPERTIES TIMEOUT 120)
	set_tests_properties(json PROPERTIES TIMEOUT 20)
	set_tests_properties(string PROPERTIES TIMEOUT 200)
	set_tests_properties(hello PROPERTIES TIMEOUT 200)
endif()
