#!/bin/bash
# - File: build
# - Description: wrapping script around build.py or build2

PIPELINE="$(dirname "$0" )"
SCRIPT="$(basename "$0")"

WAIT=${TIMEOUT:-60}

# @NOTE: print log info
info(){
	if [ $# -eq 2 ]; then
		echo "[   INFO  ]: $1 line ${SCRIPT}:$2"
	else
		echo "[   INFO  ]: $1"
	fi
}

# @NOTE: print log warning
warning(){
	if [ $# -eq 2 ]; then
		echo "[ WARNING ]: $1 line ${SCRIPT}:$2"
	else
		echo "[ WARNING ]: $1"
	fi
}

# @NOTE: print log error and exit immediatedly
error(){
	if [ $# -gt 1 ]; then
		echo "[  ERROR  ]: $1 line ${SCRIPT}:$2"
	else
		echo "[  ERROR  ]: $1 script ${SCRIPT}"
	fi
	exit -1
}

function detect_libbase() {
	PROJECT=$1

	if [[ -d "${PROJECT}/Eden" ]]; then
		echo "${PROJECT}/Eden"
	elif [[ -d "${PROJECT}/Base" ]]; then
		echo "${PROJECT}/Base"
	elif [[ -d "${PROJECT}/base" ]]; then
		echo "${PROJECT}/base"
	elif [[ -d "${PROJECT}/libbase" ]]; then
		echo "${PROJECT}/libbase"
	elif [[ -d "${PROJECT}/LibBase" ]]; then
		echo "${PROJECT}/LibBase"
	elif [[ -d "${PROJECT}/Eevee" ]]; then
		echo "${PROJECT}/Eevee"
	else
		echo "$PROJECT"
	fi
}

unameOut="$(uname -s)"
case "${unameOut}" in
	Linux*)     machine=Linux;;
	Darwin*)    machine=Mac;;
	CYGWIN*)    machine=Cygwin;;
	MINGW*)     machine=MinGw;;
	FreeBSD*)   machine=FreeBSD;;
	*)          machine="UNKNOWN:${unameOut}"
esac

if [ "$machine" == "Linux" ] || [ "$machine" == "FreeBSD" ]; then
	SU=""
	REMOVE=""
	CLEAR=""

	# @NOTE: check root if we didn"t have root permission
	if [ $(whoami) != "root" ]; then
		if [ ! $(which sudo) ]; then
			error "Sudo is needed but you aren"t on root and can"t access to root"
		fi

		if sudo -S -p "" echo -n < /dev/null 2> /dev/null ; then
			info "I found sudo can run on account $(whoami)"
			SU="sudo"
		else
			error "Sudo is not enabled"
		fi
	fi

	# @NOTE: check and set INSTALL tool
	if which apt-get >& /dev/null; then
		info "I found this distro maybe Ubuntu/Debian"
		INSTALL="apt install -y"
	elif which apt >& /dev/null; then
		info "I found this distro maybe Ubuntu/Debian"
		INSTALL="apt install -y"
	elif which yum >& /dev/null; then
		info "I found this distro maybe Centos/Redhat"
		INSTALL="yum install -y"
	elif which zypper >& /dev/null; then
		info "I found this distro maybe SUSE/OpenSuse"
		INSTALL="zypper install -y"
	elif which pkg >& /dev/null; then
		info "I found this distro maybe FreeBSD"
		INSTALL="pkg"
	else
		echo ""
		echo "I dont known your distribution, please inform me if you need to support"
		echo "You can send me an email to hung0913208@gmail.com"
		echo "Thanks"
		echo "Hung"
		echo ""
		exit -1
	fi
elif [ "$machine" == "Mac" ]; then
	info "I found this CI running on OSX"
	SU=""
	INSTALL="brew install"
else
	error "Don't support this machine ${machine}"
fi

if [ $(which git) ]; then
	# @NOTE: get actual branch of this commit, since some CI use git checkout
	# and it will create a new branch from the remote branch so we must find
	# the way to get which remote branch has actually contained this commit
	commit_sha256=$(git rev-parse HEAD)
	remote_branch="$(git branch -r --contains ${commit_sha256})"
	branch=(${remote_branch//origin\/})

	# @NOTE: jump to branch's test suite and perform build.py
	ROOT="$(git rev-parse --show-toplevel)"
	BASE="$(detect_libbase $ROOT)"
	CURRENT=$(pwd)
	PROJECT="$(basename `git config  --get remote.origin.url`)"

	mkdir -p "$ROOT/build"
	if [ $? != 0 ]; then
		error "cannot create $ROOT/build"
	fi

	cd "$ROOT/build"
	if [ $? != 0 ]; then
		error "cannot jump to $ROOT/build"
	fi

	if [ -f $ROOT/.workspace ]; then
		if [ $# != 0 ] || [ ! -f "$ROOT/CMakeLists.txt" ]; then
			if [ -f $BASE/Tools/Builder/build2 ]; then
				$BASE/Tools/Builder/build2 --config $ROOT/Tools/Builder --watcher local $@
			else
				$BASE/Tools/Builder/build.py $@
			fi
		fi
	else
		# @NOTE: use tool reinstall to perform build this repo since the repo's build
		# scripts always define on $ROOT, we will use this trick to build everything
		# with cmake first
		if ! options=$(getopt -l root,debug,rebuild,mode: -- "$@")
		then
			error "Can' parse $BASE/Tools/Builder/build $@"
		fi

		if [ $machine = "Mac" ]; then
			export CC=$(which clang)
			export CXX=$(which clang++)
		fi

		while [ $# -gt 0 ]; do
			case $1 in
				--root)		ROOT="$2"; shift;;
				--debug)	DEBUG="$2"; shift;;
				--rebuild)	REBUILD="$2"; shift;;
				--mode)		MODE="$2" ; shift;;
				(--) 		shift; break;;
				(-*) 		error "unrecognized option $1";;
				(*) 		break;;
			esac
			shift
		done

		if [[ $MODE -eq 1 ]]; then
			BUILD="$BUILD -DBUILD_STATIC_EXEC=ON"
		else
			BUILD="$BUILD"
		fi

		if [[ $REBUILD -eq 0 ]]; then
			CMAKE="reinstall.sh"
		else
			CMAKE="rebuild.sh"
		fi

		if [[ $MODE -ne 0 ]]; then
			exec 2>&-
			OUTPUT="$(CONFIGURE=$BUILD $BASE/Tools/Utilities/$CMAKE Debug $ROOT 2>&1 | tee /dev/fd/2)"

			if [[ $(grep "CMakeError.log" <<< "$OUTPUT") ]]; then
				exec 2>&1
				warning "fail configure CMakeLists.txt on Debug mode, please check console log bellow"
				echo "================================================================================="
				echo ""
				echo "$OUTPUT"
				echo "---------------------------------------------------------------------------------"
				sleep $WAIT
				exit -1
			elif [[ $(grep "make\: \*\*\* \[all\] Error" <<< "$OUTPUT" ) ]]; then
				exec 2>&1
				warning "fail build on Debug mode, please check console log bellow"
				echo "================================================================================="
				echo ""
				echo "$OUTPUT"
				echo "---------------------------------------------------------------------------------"
				sleep $WAIT
				exit -1
			fi

			if [[ $MODE -ne 2 ]]; then
				exec 2>&-
				OUTPUT="$(CONFIGURE=$BUILD $BASE/Tools/Utilities/$CMAKE Release $ROOT 2>&1 | tee /dev/fd/2)"

				if [[ $(grep "CMakeError.log" <<< "$OUTPUT") ]]; then
					exec 2>&1
					warning "fail configure CMakeLists.txt on Release mode, please check console log bellow"
					echo "================================================================================="
					echo ""
					echo "$OUTPUT"
					echo "---------------------------------------------------------------------------------"
					sleep $WAIT
					exit -1
				elif [[ $(grep "make\: \*\*\* \[all\] Error" <<< "$OUTPUT" ) ]]; then
					exec 2>&1
					warning "fail build on Release mode, please check console log bellow"
					echo "================================================================================="
					echo ""
					echo "$OUTPUT"
					echo "---------------------------------------------------------------------------------"
					sleep $WAIT
					exit -1
				fi
			fi
		fi
		
		if [[ $MODE -ne 2 ]]; then
			exec 2>&-
			OUTPUT="$(CONFIGURE=$BUILD $BASE/Tools/Utilities/$CMAKE Sanitize $ROOT 2>&1 | tee /dev/fd/2)"

			if [[ $(grep "CMakeError.log" <<< "$OUTPUT") ]]; then
				#exec 2>&1
				warning "fail configure CMakeLists.txt on Sanitize mode, please check console log bellow"
				echo "================================================================================="
				echo ""
				echo "$OUTPUT"
				echo "---------------------------------------------------------------------------------"
				sleep $WAIT
				exit -1
			elif [[ $(grep "make\: \*\*\* \[all\] Error" <<< "$OUTPUT" ) ]]; then
				#exec 2>&1
				warning "fail build on Release mode, please check console log bellow"
				echo "================================================================================="
				echo ""
				echo "$OUTPUT"
				echo "---------------------------------------------------------------------------------"
				sleep $WAIT
				exit -1
			fi
		fi

		if [[ $MODE -eq 2 ]]; then
			exec 2>&1
			$BASE/Tools/Utilities/ctest.sh Debug

			exit $?
		elif [[ $MODE -ne 1 ]]; then
			exec 2>&-
			OUTPUT="$(CONFIGURE=$BUILD $BASE/Tools/Utilities/$CMAKE Coverage $ROOT 2>&1 | tee /dev/fd/2)"

			if [[ $(grep "CMakeError.log" <<< "$OUTPUT") ]]; then
				exec 2>&1
				warning "fail configure CMakeLists.txt on Coverage mode, please check console log bellow"
				echo "================================================================================="
				echo ""
				echo "$OUTPUT"
				echo "---------------------------------------------------------------------------------"
				sleep $WAIT
				exit -1
			elif [[ $(grep "make\: \*\*\* \[all\] Error" <<< "$OUTPUT" ) ]]; then
				#exec 2>&1
				warning "fail build on Coverage mode, please check console log bellow"
				echo "================================================================================="
				echo ""
				echo "$OUTPUT"
				echo "---------------------------------------------------------------------------------"
				sleep $WAIT
				exit -1
			elif [[ $MODE -eq 0 ]]; then
				#exec 2>&1
				$BASE/Tools/Utilities/ctest.sh Coverage
				$BASE/Tools/Utilities/ctest.sh Sanitize
				CODE=$?
	
				bash $BASE/Tools/Utilities/coverage.sh .
				exit $CODE
			fi
		fi

		cd $CURRENT
		if [ $? != 0 ]; then
			error "cannot jump to $CURRENT"
		fi
	fi
else
	exit -1
fi
